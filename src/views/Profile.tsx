import { useEffect, useState, useRef } from 'react'
import { useAppDispatch, useAppSelector } from '@/store/hooks'
import { getCurrentUser } from '@/store/authSlice'
import { AuthService } from '@/services/authService'
import { BaseButton, BaseCard, BaseInput } from '@/components/common'
import { 
  UserIcon, 
  LockClosedIcon, 
  CogIcon, 
  WrenchScrewdriverIcon,
  ShoppingCartIcon, 
  TagIcon,
  PencilIcon,
  BellIcon,
  ClockIcon,
  XMarkIcon,
  BoltIcon,
  ArchiveBoxIcon
} from '@heroicons/react/24/outline'
import './profile.scss'

interface UserProfile {
  fullName: string
  email: string
  phone: string
  address: string
  dateOfBirth: string
  gender: 'Male' | 'Female' | ''
  avatarUrl: string
}

interface ChangePasswordData {
  currentPassword: string
  newPassword: string
  confirmPassword: string
}

export default function Profile() {
  const dispatch = useAppDispatch()
  const auth = useAppSelector((s) => s.auth)
  const [activeTab, setActiveTab] = useState<'profile' | 'security' | 'preferences' | 'maintenance-history' | 'purchase-history' | 'saved-promotions' | 'notifications' | 'cart'>('profile')
  const [isEditing, setIsEditing] = useState(false)
  const [isSaving, setIsSaving] = useState(false)
  const [showPasswordModal, setShowPasswordModal] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)
  
  const [profileData, setProfileData] = useState<UserProfile>({
    fullName: '',
    email: '',
    phone: '',
    address: '',
    dateOfBirth: '',
    gender: '',
    avatarUrl: 'üë§'
  })

  const [passwordData, setPasswordData] = useState<ChangePasswordData>({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  })

  const [originalData, setOriginalData] = useState(profileData)

  useEffect(() => {
    // Load current user from API when page mounts
    dispatch(getCurrentUser())
  }, [dispatch])

  useEffect(() => {
    // Map auth.user to local profile UI state
    if (auth.user) {
      setProfileData((prev) => ({
        ...prev,
        fullName: auth.user.fullName || '',
        email: auth.user.email || '',
        // Map optional fields from backend if available
        address: (auth.user as any).address ?? prev.address,
        dateOfBirth: (auth.user as any).dateOfBirth ?? prev.dateOfBirth,
        gender: (auth.user as any).gender
          ? ((auth.user as any).gender === 'MALE' ? 'Male' : (auth.user as any).gender === 'FEMALE' ? 'Female' : prev.gender)
          : prev.gender,
        avatarUrl: auth.user.avatar || prev.avatarUrl || 'üë§',
      }))
      setOriginalData((prev) => ({
        ...prev,
        fullName: auth.user.fullName || '',
        email: auth.user.email || '',
        address: (auth.user as any).address ?? prev.address,
        dateOfBirth: (auth.user as any).dateOfBirth ?? prev.dateOfBirth,
        gender: (auth.user as any).gender
          ? ((auth.user as any).gender === 'MALE' ? 'Male' : (auth.user as any).gender === 'FEMALE' ? 'Female' : prev.gender)
          : prev.gender,
        avatarUrl: auth.user.avatar || prev.avatarUrl || 'üë§',
      }))
    }
  }, [auth.user])

  const handleInputChange = (field: keyof UserProfile, value: string) => {
    setProfileData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleEdit = () => {
    setOriginalData(profileData)
    setIsEditing(true)
  }

  const handleCancel = () => {
    setProfileData(originalData)
    setIsEditing(false)
  }

  const handleSave = async () => {
    setIsSaving(true)
    try {
      // Basic validation to avoid 400 from backend
      const errors: string[] = []
      if (!profileData.fullName?.trim()) errors.push('H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
      const dob = profileData.dateOfBirth?.trim()
      if (!dob || !/^\d{4}-\d{2}-\d{2}$/.test(dob)) errors.push('Ng√†y sinh ph·∫£i c√≥ ƒë·ªãnh d·∫°ng YYYY-MM-DD')
      if (profileData.gender !== 'Male' && profileData.gender !== 'Female') errors.push('Vui l√≤ng ch·ªçn gi·ªõi t√≠nh')
      if (!profileData.address?.trim()) errors.push('ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')

      if (errors.length) {
        alert(errors.join('\n'))
        return
      }

      const payload: any = {
        fullName: profileData.fullName.trim(),
        dateOfBirth: dob,
        gender: profileData.gender === 'Male' ? 'MALE' : 'FEMALE',
        address: profileData.address.trim(),
      }

      await AuthService.updateProfile(payload)

      await dispatch(getCurrentUser())
      setOriginalData(profileData)
      setIsEditing(false)
    } catch (error: any) {
      const msg = error?.response?.data?.message || error?.message || 'C·∫≠p nh·∫≠t h·ªì s∆° th·∫•t b·∫°i'
      alert(msg)
    } finally {
      setIsSaving(false)
    }
  }

  const handleAvatarClick = () => {
    fileInputRef.current?.click()
  }

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    // Optional: validate file type/size quickly on FE
    const isImage = file.type.startsWith('image/')
    if (!isImage) {
      alert('Vui l√≤ng ch·ªçn t·ªáp h√¨nh ·∫£nh h·ª£p l·ªá')
      return
    }

    setIsSaving(true)
    AuthService.uploadAvatar(file)
      .then(async (resp) => {
        const rawUrl = resp?.data?.url || resp?.url || resp?.data?.avatarUrl
        const url = rawUrl ? `${rawUrl}${rawUrl.includes('?') ? '&' : '?'}_=${Date.now()}` : ''
        if (url) {
          setProfileData(prev => ({
            ...prev,
            avatarUrl: url
          }))
          // Always refresh current user to persist new avatar across reloads
          try {
            await dispatch(getCurrentUser()).unwrap()
          } catch {
            // ignore, UI still shows local url
          }
          return
        }
        // Fallback: refetch profile to get updated avatar
        try {
          const me = await dispatch(getCurrentUser()).unwrap()
          if (me && (me as any).avatar) {
            setProfileData(prev => ({ ...prev, avatarUrl: (me as any).avatar }))
            return
          }
          throw new Error('Upload avatar th√†nh c√¥ng nh∆∞ng thi·∫øu URL tr·∫£ v·ªÅ')
        } catch (e) {
          throw new Error('Upload avatar th√†nh c√¥ng nh∆∞ng kh√¥ng l·∫•y ƒë∆∞·ª£c URL m·ªõi')
        }
      })
      .catch((error: any) => {
        const msg = error?.response?.data?.message || error?.message || 'T·∫£i ·∫£nh ƒë·∫°i di·ªán th·∫•t b·∫°i'
        alert(msg)
      })
      .finally(() => setIsSaving(false))
  }

  const handlePasswordChange = (field: keyof ChangePasswordData, value: string) => {
    setPasswordData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleChangePassword = async () => {
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      alert('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!')
      return
    }
    
    setIsSaving(true)
    try {
      await AuthService.changePassword({
        currentPassword: passwordData.currentPassword,
        newPassword: passwordData.newPassword,
        confirmNewPassword: passwordData.confirmPassword,
      })

      setShowPasswordModal(false)
      setPasswordData({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      })
      alert('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!')
    } catch (error: any) {
      const msg = error?.response?.data?.message || error?.message || 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i'
      alert(msg)
    } finally {
      setIsSaving(false)
    }
  }

  const handleRemoveCartItem = (itemId: string) => {
    console.log('Removing cart item:', itemId)
    // Logic to remove item from cart
  }

  const handleMarkAsRead = (notificationId: string) => {
    console.log('Marking notification as read:', notificationId)
    // Logic to mark notification as read
  }

  const tabOptions = [
    { key: 'profile', label: 'Th√¥ng tin c√° nh√¢n', icon: UserIcon },
    { key: 'security', label: 'B·∫£o m·∫≠t', icon: LockClosedIcon },
    { key: 'preferences', label: 'T√πy ch·ªçn', icon: CogIcon },
    { key: 'notifications', label: 'Th√¥ng b√°o', icon: BellIcon },
    { key: 'cart', label: 'Gi·ªè h√†ng', icon: ShoppingCartIcon },
    { key: 'maintenance-history', label: 'L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng', icon: WrenchScrewdriverIcon },
    { key: 'purchase-history', label: 'L·ªãch s·ª≠ mua h√†ng', icon: ClockIcon },
    { key: 'saved-promotions', label: 'Khuy·∫øn m√£i ƒë√£ l∆∞u', icon: TagIcon }
  ] as const

  return (
    <div className="profile-page">
      <div className="container">
        {/* Page Header */}
        <div className="page-header">
          <h1 className="page-title">H·ªì s∆° c√° nh√¢n</h1>
          <p className="page-description">Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n v√† c√†i ƒë·∫∑t t√†i kho·∫£n</p>
        </div>

        {/* Profile Layout with Sidebar */}
        <div className="profile-layout">
          {/* Sidebar Navigation */}
          <div className="profile-sidebar">
            <div className="user-info">
              <div className="user-avatar-wrapper">
                <div className="user-avatar" onClick={handleAvatarClick}>
                  {profileData.avatarUrl && (/^data:/.test(profileData.avatarUrl) || /^https?:\/\//.test(profileData.avatarUrl)) ? (
                    <img src={profileData.avatarUrl} alt="Avatar" />
                  ) : (
                    profileData.avatarUrl
                  )}
                </div>
                <button className="avatar-edit-btn" onClick={handleAvatarClick}>
                  <PencilIcon className="w-3 h-3" />
                </button>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  onChange={handleFileChange}
                  style={{ display: 'none' }}
                />
              </div>
              <div className="user-details">
                <h3 className="user-name">{profileData.fullName}</h3>
                <p className="user-email">{profileData.email}</p>
              </div>
            </div>

            <nav className="sidebar-nav">
                     {tabOptions.map(tab => {
                       const IconComponent = tab.icon
  return (
                         <button
                           key={tab.key}
                           className={`nav-item ${activeTab === tab.key ? 'active' : ''}`}
                           onClick={() => setActiveTab(tab.key)}
                         >
                           <IconComponent className="nav-icon" />
                           <span className="nav-label">{tab.label}</span>
                         </button>
                       )
                     })}
            </nav>
          </div>

          {/* Main Content */}
          <div className="profile-content">
          {activeTab === 'profile' && (
            <BaseCard className="profile-form-card">
              <div className="card-header">
                <h3 className="card-title">Th√¥ng tin c√° nh√¢n</h3>
                <div className="card-actions">
                  {!isEditing ? (
                    <BaseButton variant="outline" onClick={handleEdit}>
                      Ch·ªânh s·ª≠a
                    </BaseButton>
                  ) : (
                    <div className="edit-actions">
                      <BaseButton variant="outline" onClick={handleCancel}>
                        H·ªßy
                      </BaseButton>
                      <BaseButton 
                        variant="primary" 
                        onClick={handleSave}
                        loading={isSaving}
                      >
                        {isSaving ? 'ƒêang l∆∞u...' : 'L∆∞u'}
                      </BaseButton>
                    </div>
                  )}
                </div>
              </div>

              <div className="profile-form">
                <div className="form-row">
                  <div className="form-group">
                    <label className="form-label">H·ªç v√† t√™n</label>
                    <BaseInput
                      value={profileData.fullName}
                      onChange={(value) => handleInputChange('fullName', value)}
                      disabled={!isEditing}
                      placeholder="Nh·∫≠p h·ªç v√† t√™n"
                    />
                  </div>
                  <div className="form-group">
                    <label className="form-label">Email</label>
                    <BaseInput
                      value={profileData.email}
                      onChange={(value) => handleInputChange('email', value)}
                      disabled={true}
                      type="email"
                      placeholder="Kh√¥ng th·ªÉ thay ƒë·ªïi email"
                    />
                  </div>
                </div>

                <div className="form-row">
                  <div className="form-group">
                    <label className="form-label">S·ªë ƒëi·ªán tho·∫°i</label>
                    <BaseInput
                      value={profileData.phone}
                      onChange={(value) => handleInputChange('phone', value)}
                      disabled={true}
                      placeholder="Kh√¥ng th·ªÉ thay ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i"
                    />
                  </div>
                  <div className="form-group">
                    <label className="form-label">Gi·ªõi t√≠nh</label>
                    <select
                      className="form-select"
                      value={profileData.gender}
                      onChange={(e) => handleInputChange('gender', e.target.value)}
                      disabled={!isEditing}
                    >
                      <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                      <option value="Male">Nam</option>
                      <option value="Female">N·ªØ</option>
                    </select>
                  </div>
                </div>

                <div className="form-row">
                  <div className="form-group">
                    <label className="form-label">Ng√†y sinh</label>
                    <BaseInput
                      value={profileData.dateOfBirth}
                      onChange={(value) => handleInputChange('dateOfBirth', value)}
                      disabled={!isEditing}
                      type="date"
                    />
                  </div>
                  <div className="form-group">
                    <label className="form-label">ƒê·ªãa ch·ªâ</label>
                    <BaseInput
                      value={profileData.address}
                      onChange={(value) => handleInputChange('address', value)}
                      disabled={!isEditing}
                      placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
                    />
                  </div>
                </div>
              </div>
            </BaseCard>
          )}

          {activeTab === 'security' && (
            <BaseCard className="security-card">
              <div className="card-header">
                <h3 className="card-title">C√†i ƒë·∫∑t b·∫£o m·∫≠t</h3>
              </div>

              <div className="security-content">
                <div className="security-item">
                  <div className="security-info">
                    <h4>ƒê·ªïi m·∫≠t kh·∫©u</h4>
                    <p>C·∫≠p nh·∫≠t m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n</p>
                  </div>
                  <BaseButton variant="outline" onClick={() => setShowPasswordModal(true)}>
                    ƒê·ªïi m·∫≠t kh·∫©u
                  </BaseButton>
                </div>

                <div className="security-item">
                  <div className="security-info">
                    <h4>X√°c th·ª±c 2 l·ªõp</h4>
                    <p>TƒÉng c∆∞·ªùng b·∫£o m·∫≠t v·ªõi x√°c th·ª±c 2 l·ªõp</p>
                  </div>
                  <BaseButton variant="outline">K√≠ch ho·∫°t</BaseButton>
                </div>

                <div className="security-item">
                  <div className="security-info">
                    <h4>Thi·∫øt b·ªã ƒëƒÉng nh·∫≠p</h4>
                    <p>Qu·∫£n l√Ω c√°c thi·∫øt b·ªã ƒë√£ ƒëƒÉng nh·∫≠p</p>
                  </div>
                  <BaseButton variant="outline">Xem chi ti·∫øt</BaseButton>
                </div>
              </div>
            </BaseCard>
          )}

          {activeTab === 'preferences' && (
            <BaseCard className="preferences-card">
              <div className="card-header">
                <h3 className="card-title">T√πy ch·ªçn c√° nh√¢n</h3>
              </div>

              <div className="preferences-content">
                <div className="preference-item">
                  <div className="preference-info">
                    <h4>Th√¥ng b√°o Email</h4>
                    <p>Nh·∫≠n th√¥ng b√°o qua email</p>
                  </div>
                  <label className="toggle-switch">
                    <input type="checkbox" defaultChecked />
                    <span className="slider"></span>
                  </label>
                </div>

                <div className="preference-item">
                  <div className="preference-info">
                    <h4>Th√¥ng b√°o SMS</h4>
                    <p>Nh·∫≠n th√¥ng b√°o qua tin nh·∫Øn</p>
                  </div>
                  <label className="toggle-switch">
                    <input type="checkbox" defaultChecked />
                    <span className="slider"></span>
                  </label>
                </div>

                <div className="preference-item">
                  <div className="preference-info">
                    <h4>Ng√¥n ng·ªØ hi·ªÉn th·ªã</h4>
                    <p>Ch·ªçn ng√¥n ng·ªØ giao di·ªán</p>
                  </div>
                  <select className="preference-select">
                    <option value="vi">Ti·∫øng Vi·ªát</option>
                    <option value="en">English</option>
                  </select>
                </div>

                <div className="preference-item">
                  <div className="preference-info">
                    <h4>Ch·∫ø ƒë·ªô t·ªëi</h4>
                    <p>Chuy·ªÉn ƒë·ªïi giao di·ªán t·ªëi/s√°ng</p>
                  </div>
                  <label className="toggle-switch">
                    <input type="checkbox" />
                    <span className="slider"></span>
                  </label>
                </div>
              </div>
            </BaseCard>
          )}

          {activeTab === 'maintenance-history' && (
            <BaseCard className="maintenance-history-card">
              <div className="card-header">
                <h3 className="card-title">L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng</h3>
              </div>

              <div className="history-content">
                <div className="history-item">
                  <div className="history-info">
                    <h4>B·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥ 10,000km</h4>
                    <p>Ng√†y: 15/01/2024 | Garage: AutoEV H√† N·ªôi</p>
                    <span className="status completed">Ho√†n th√†nh</span>
                  </div>
                  <div className="history-details">
                    <p>Chi ph√≠: 1,500,000 VNƒê</p>
                    <BaseButton variant="outline" size="sm">Xem chi ti·∫øt</BaseButton>
                  </div>
                </div>

                <div className="history-item">
                  <div className="history-info">
                    <h4>Thay pin xe ƒëi·ªán</h4>
                    <p>Ng√†y: 28/11/2023 | Garage: AutoEV HCM</p>
                    <span className="status completed">Ho√†n th√†nh</span>
                  </div>
                  <div className="history-details">
                    <p>Chi ph√≠: 45,000,000 VNƒê</p>
                    <BaseButton variant="outline" size="sm">Xem chi ti·∫øt</BaseButton>
                  </div>
                </div>

                <div className="history-item">
                  <div className="history-info">
                    <h4>Ki·ªÉm tra h·ªá th·ªëng ƒëi·ªán</h4>
                    <p>Ng√†y: 05/10/2023 | Garage: AutoEV ƒê√† N·∫µng</p>
                    <span className="status completed">Ho√†n th√†nh</span>
                  </div>
                  <div className="history-details">
                    <p>Chi ph√≠: 800,000 VNƒê</p>
                    <BaseButton variant="outline" size="sm">Xem chi ti·∫øt</BaseButton>
                  </div>
                </div>
              </div>
            </BaseCard>
          )}

          {activeTab === 'purchase-history' && (
            <BaseCard className="purchase-history-card">
              <div className="card-header">
                <h3 className="card-title">L·ªãch s·ª≠ mua h√†ng</h3>
              </div>

              <div className="history-content">
                <div className="history-item">
                  <div className="history-info">
                    <h4>B·ªô s·∫°c nhanh DC 50kW</h4>
                    <p>Ng√†y: 20/12/2023 | M√£ ƒë∆°n: #EV20231220001</p>
                    <span className="status delivered">ƒê√£ giao</span>
                  </div>
                  <div className="history-details">
                    <p>S·ªë l∆∞·ª£ng: 1 | Gi√°: 25,000,000 VNƒê</p>
                    <BaseButton variant="outline" size="sm">Xem ƒë∆°n h√†ng</BaseButton>
                  </div>
                </div>

                <div className="history-item">
                  <div className="history-info">
                    <h4>L·ªëp xe ƒëi·ªán Michelin Energy E-V</h4>
                    <p>Ng√†y: 15/11/2023 | M√£ ƒë∆°n: #EV20231115002</p>
                    <span className="status delivered">ƒê√£ giao</span>
                  </div>
                  <div className="history-details">
                    <p>S·ªë l∆∞·ª£ng: 4 | Gi√°: 8,000,000 VNƒê</p>
                    <BaseButton variant="outline" size="sm">Xem ƒë∆°n h√†ng</BaseButton>
                  </div>
                </div>

                <div className="history-item">
                  <div className="history-info">
                    <h4>D·∫ßu phanh DOT 4 chuy√™n d·ª•ng EV</h4>
                    <p>Ng√†y: 02/09/2023 | M√£ ƒë∆°n: #EV20230902003</p>
                    <span className="status delivered">ƒê√£ giao</span>
                  </div>
                  <div className="history-details">
                    <p>S·ªë l∆∞·ª£ng: 2 | Gi√°: 450,000 VNƒê</p>
                    <BaseButton variant="outline" size="sm">Xem ƒë∆°n h√†ng</BaseButton>
                  </div>
                </div>
              </div>
            </BaseCard>
          )}

          {activeTab === 'notifications' && (
            <BaseCard className="notifications-card">
              <div className="card-header">
                <h3 className="card-title">Th√¥ng b√°o</h3>
                <BaseButton variant="outline" size="sm">ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc t·∫•t c·∫£</BaseButton>
              </div>

              <div className="notifications-content">
                <div className="notification-item unread">
                  <div className="notification-icon">
                    <WrenchScrewdriverIcon className="w-5 h-5" />
                  </div>
                  <div className="notification-content">
                    <h4>L·ªãch b·∫£o d∆∞·ª°ng s·∫Øp t·ªõi</h4>
                    <p>Xe VinFast VF8 c·ªßa b·∫°n s·∫Øp ƒë·∫øn h·∫°n b·∫£o d∆∞·ª°ng 10,000km. H√£y ƒë·∫∑t l·ªãch ngay!</p>
                    <span className="notification-time">2 gi·ªù tr∆∞·ªõc</span>
                  </div>
                  <div className="notification-actions">
                    <BaseButton variant="primary" size="sm">ƒê·∫∑t l·ªãch</BaseButton>
                    <button 
                      className="mark-read-btn"
                      onClick={() => handleMarkAsRead('notif-1')}
                      title="ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc"
                    >
                      <XMarkIcon className="w-4 h-4" />
                    </button>
                  </div>
                </div>

                <div className="notification-item unread">
                  <div className="notification-icon">
                    <ArchiveBoxIcon className="w-5 h-5" />
                  </div>
                  <div className="notification-content">
                    <h4>ƒê∆°n h√†ng ƒë√£ giao</h4>
                    <p>B·ªô s·∫°c nhanh DC 50kW ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm!</p>
                    <span className="notification-time">1 ng√†y tr∆∞·ªõc</span>
                  </div>
                  <div className="notification-actions">
                    <BaseButton variant="outline" size="sm">ƒê√°nh gi√°</BaseButton>
                    <button 
                      className="mark-read-btn"
                      onClick={() => handleMarkAsRead('notif-2')}
                      title="ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc"
                    >
                      <XMarkIcon className="w-4 h-4" />
                    </button>
                  </div>
                </div>

                <div className="notification-item">
                  <div className="notification-icon">
                    <TagIcon className="w-5 h-5" />
                  </div>
                  <div className="notification-content">
                    <h4>Khuy·∫øn m√£i m·ªõi</h4>
                    <p>Gi·∫£m 20% cho d·ªãch v·ª• b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥ trong th√°ng 3. √Åp d·ª•ng t·ª´ ng√†y mai!</p>
                    <span className="notification-time">3 ng√†y tr∆∞·ªõc</span>
                  </div>
                  <div className="notification-actions">
                    <BaseButton variant="secondary" size="sm">Xem chi ti·∫øt</BaseButton>
                  </div>
                </div>

                <div className="notification-item">
                  <div className="notification-icon">
                    <BellIcon className="w-5 h-5" />
                  </div>
                  <div className="notification-content">
                    <h4>C·∫≠p nh·∫≠t h·ªá th·ªëng</h4>
                    <p>H·ªá th·ªëng s·∫Ω b·∫£o tr√¨ v√†o 2:00 AM ng√†y 25/03. D·ª± ki·∫øn ho√†n th√†nh sau 2 ti·∫øng.</p>
                    <span className="notification-time">1 tu·∫ßn tr∆∞·ªõc</span>
                  </div>
                </div>
              </div>
            </BaseCard>
          )}

          {activeTab === 'cart' && (
            <BaseCard className="cart-card">
              <div className="card-header">
                <h3 className="card-title">Gi·ªè h√†ng</h3>
                <span className="cart-summary">2 s·∫£n ph·∫©m</span>
              </div>

              <div className="cart-content">
                <div className="cart-item">
                  <div className="item-image">
                    <BoltIcon className="w-8 h-8" />
                  </div>
                  <div className="item-details">
                    <h4>Pin s·∫°c d·ª± ph√≤ng 12V</h4>
                    <p className="item-description">Pin lithium chuy√™n d·ª•ng cho xe ƒëi·ªán, dung l∆∞·ª£ng 20,000mAh</p>
                    <div className="item-meta">
                      <span className="item-price">2,500,000 VNƒê</span>
                      <div className="quantity-controls">
                        <button className="quantity-btn">-</button>
                        <span className="quantity">1</span>
                        <button className="quantity-btn">+</button>
                      </div>
                    </div>
                  </div>
                  <button 
                    className="remove-item-btn"
                    onClick={() => handleRemoveCartItem('cart-item-1')}
                    title="X√≥a kh·ªèi gi·ªè h√†ng"
                  >
                    <XMarkIcon className="w-5 h-5" />
                  </button>
                </div>

                <div className="cart-item">
                  <div className="item-image">
                    <WrenchScrewdriverIcon className="w-8 h-8" />
                  </div>
                  <div className="item-details">
                    <h4>B·ªô d·ª•ng c·ª• s·ª≠a ch·ªØa EV</h4>
                    <p className="item-description">B·ªô c√¥ng c·ª• chuy√™n d·ª•ng 25 m√≥n cho b·∫£o d∆∞·ª°ng xe ƒëi·ªán</p>
                    <div className="item-meta">
                      <span className="item-price">1,200,000 VNƒê</span>
                      <div className="quantity-controls">
                        <button className="quantity-btn">-</button>
                        <span className="quantity">1</span>
                        <button className="quantity-btn">+</button>
                      </div>
                    </div>
                  </div>
                  <button 
                    className="remove-item-btn"
                    onClick={() => handleRemoveCartItem('cart-item-2')}
                    title="X√≥a kh·ªèi gi·ªè h√†ng"
                  >
                    <XMarkIcon className="w-5 h-5" />
                  </button>
                </div>

                <div className="cart-summary-section">
                  <div className="summary-row">
                    <span>T·ªïng ph·ª•:</span>
                    <span>3,700,000 VNƒê</span>
                  </div>
                  <div className="summary-row">
                    <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
                    <span>Mi·ªÖn ph√≠</span>
                  </div>
                  <div className="summary-row total">
                    <span>T·ªïng c·ªông:</span>
                    <span>3,700,000 VNƒê</span>
                  </div>
                </div>

                <div className="cart-actions">
                  <BaseButton variant="outline" size="lg">Ti·∫øp t·ª•c mua s·∫Øm</BaseButton>
                  <BaseButton variant="primary" size="lg">Thanh to√°n</BaseButton>
                </div>
              </div>
            </BaseCard>
          )}

          {activeTab === 'saved-promotions' && (
            <BaseCard className="saved-promotions-card">
              <div className="card-header">
                <h3 className="card-title">Khuy·∫øn m√£i ƒë√£ l∆∞u</h3>
              </div>

              <div className="promotions-content">
                <div className="promotion-item active">
                  <div className="promotion-info">
                    <h4>Gi·∫£m 20% d·ªãch v·ª• b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥</h4>
                    <p>√Åp d·ª•ng cho t·∫•t c·∫£ d·ªãch v·ª• b·∫£o d∆∞·ª°ng t·ª´ 5,000km tr·ªü l√™n</p>
                    <span className="expiry">H·∫øt h·∫°n: 31/03/2024</span>
                  </div>
                  <div className="promotion-actions">
                    <span className="discount">-20%</span>
                    <BaseButton variant="primary" size="sm">S·ª≠ d·ª•ng ngay</BaseButton>
                  </div>
                </div>

                <div className="promotion-item active">
                  <div className="promotion-info">
                    <h4>Mi·ªÖn ph√≠ ki·ªÉm tra pin trong th√°ng 2</h4>
                    <p>Ki·ªÉm tra to√†n di·ªán h·ªá th·ªëng pin v√† charging system</p>
                    <span className="expiry">H·∫øt h·∫°n: 29/02/2024</span>
                  </div>
                  <div className="promotion-actions">
                    <span className="discount">FREE</span>
                    <BaseButton variant="primary" size="sm">ƒê·∫∑t l·ªãch</BaseButton>
                  </div>
                </div>

                <div className="promotion-item expired">
                  <div className="promotion-info">
                    <h4>Mua 1 t·∫∑ng 1 d·∫ßu phanh EV</h4>
                    <p>√Åp d·ª•ng cho t·∫•t c·∫£ s·∫£n ph·∫©m d·∫ßu phanh chuy√™n d·ª•ng xe ƒëi·ªán</p>
                    <span className="expiry expired">ƒê√£ h·∫øt h·∫°n: 31/01/2024</span>
                  </div>
                  <div className="promotion-actions">
                    <span className="discount expired">1+1</span>
                    <BaseButton variant="outline" size="sm" disabled>H·∫øt h·∫°n</BaseButton>
                  </div>
                </div>
              </div>
            </BaseCard>
          )}
          </div>
        </div>

        {/* Password Change Modal */}
        {showPasswordModal && (
          <div className="modal-overlay" onClick={() => setShowPasswordModal(false)}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
              <div className="modal-header">
                <h3>ƒê·ªïi m·∫≠t kh·∫©u</h3>
                <button className="modal-close" onClick={() => setShowPasswordModal(false)}>√ó</button>
              </div>
              
              <div className="modal-body">
                <div className="form-group">
                  <label className="form-label">M·∫≠t kh·∫©u hi·ªán t·∫°i</label>
                  <BaseInput
                    type="password"
                    value={passwordData.currentPassword}
                    onChange={(value) => handlePasswordChange('currentPassword', value)}
                    placeholder="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
                  />
                </div>

                <div className="form-group">
                  <label className="form-label">M·∫≠t kh·∫©u m·ªõi</label>
                  <BaseInput
                    type="password"
                    value={passwordData.newPassword}
                    onChange={(value) => handlePasswordChange('newPassword', value)}
                    placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                  />
                </div>

                <div className="form-group">
                  <label className="form-label">X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi</label>
                  <BaseInput
                    type="password"
                    value={passwordData.confirmPassword}
                    onChange={(value) => handlePasswordChange('confirmPassword', value)}
                    placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
                  />
                </div>
              </div>

              <div className="modal-footer">
                <BaseButton variant="outline" onClick={() => setShowPasswordModal(false)}>
                  H·ªßy
                </BaseButton>
                <BaseButton 
                  variant="primary" 
                  onClick={handleChangePassword}
                  loading={isSaving}
                >
                  {isSaving ? 'ƒêang l∆∞u...' : 'ƒê·ªïi m·∫≠t kh·∫©u'}
                </BaseButton>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

